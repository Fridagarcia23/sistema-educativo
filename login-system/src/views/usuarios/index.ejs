<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Gestión de Usuarios</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/xlsx/0.18.5/xlsx.full.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.24/jspdf.plugin.autotable.min.js"></script>
    <link href="https://fonts.googleapis.com/css2?family=Margarine&display=swap" rel="stylesheet">
    <style>

body {
    margin: 0;
    font-family: 'Margarine', sans-serif;
    display: flex;
    min-height: 100vh;
    background-color: #f7f7f7;
}

@media print {
    .no-print {
        display: none;
    }
}

/* Estilos de los mensajes emergentes */
#messageBox {
    position: fixed;
    top: 20px;
    right: 20px;
    z-index: 1050;
    width: 300px;
}

/* Paginación */
.pagination {
    display: flex;
    justify-content: center;
    padding: 0;
    margin: 20px 0;
    list-style: none;
}

.pagination .page-item {
    margin: 0 5px;
}

.pagination .page-link {
    display: block;
    padding: 8px 12px;
    font-size: 12px;
    color: #007bff;
    background-color: #fff;
    border: 1px solid #dee2e6;
    border-radius: 4px;
    text-decoration: none;
}

.pagination .page-link:hover {
    background-color: #e9ecef;
    border-color: #ddd;
}

.pagination .page-item.active .page-link {
    background-color: #007bff;
    border-color: #007bff;
    color: #fff;
    pointer-events: none;
}

.pagination .page-link:focus, .pagination .page-link:active {
    box-shadow: none;
}

/* Botones */
.btn {
    display: inline-flex;
    align-items: center;
    padding: 8px 12px;
    margin: 5px;
    font-size: 16px;
    color: #fff;
    border: none;
    border-radius: 4px;
    cursor: pointer;
}

/* Botones de exportación */
.btn-excel {
    background-color: #28a745;
}

.btn-pdf {
    background-color: #f72821;
}

.btn i {
    margin-right: 8px;
}

.export-buttons {
    margin-bottom: 20px;
}

.export-buttons .btn {
    margin-right: 10px;
}

/* Contenedores de filtros */
.filter-container {
    display: flex;
    flex-wrap: wrap;
    gap: 10px;
    margin-top: 20px;
}

.filter-input {
    max-width: 200px;
    flex: 1;
}

.filter-button {
    flex: 0 0 auto;
    align-self: center;
}

.btn-filter {
    background-color: #007bff;
    border-color: #007bff;
}

.btn-filter:hover {
    background-color: #0056b3;
    border-color: #004085;
}

/* Selección de registros por página */
.records-per-page-container {
    display: flex;
    align-items: center;
    gap: 10px;
    margin-top: 20px;
    margin-bottom: 20px;
}

.records-per-page-label {
    font-weight: bold;
}

.records-per-page-select {
    max-width: 150px;
}

/* Tabla */
.table-container {
    display: flex;
    flex-direction: column;
    align-items: center; /* Centrar horizontalmente */
    margin-top: 10px, 40px; /* Espacio superior */
    margin-left: 270px;
}

.table {
    margin-top: 20px;
    border-collapse: collapse;
    width: 100%;
    max-width: 100%;
    margin: auto;
}

.table th, .table td {
    padding: 7px;
    text-align: left;
}

.table th {
    background-color: #f8f9fa;
    font-weight: bold;
}

.table tbody tr:nth-child(even) {
    background-color: #f2f2f2;
}

.table thead th {
    background-color: #359b16;
    color: white;
}

/* Estilo para el botón de Crear Usuario */
.btn-primary {
    border-radius: 0.25rem;
    background-color: #007bff;
    border-color: #007bff;
    color: #fff;
    font-weight: bold;
    transition: background-color 0.3s, border-color 0.3s, box-shadow 0.3s;
}

.btn-primary:hover {
    background-color: #0056b3;
    border-color: #004085;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.btn-primary i {
    margin-right: 5px;
}

/* Estilo para los botones de descarga */
.btn-download {
    border-radius: 0.25rem;
    font-weight: bold;
    transition: background-color 0.3s, border-color 0.3s, box-shadow 0.3s;
    font-family: 'Lato', sans-serif;
    font-size: 1rem;
}

.btn-excel:hover {
    background-color: #fff;
    color: #28a745;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.btn-pdf:hover {
    background-color: #fff;
    color: #f72821;
    box-shadow: 0 4px 8px rgba(0,0,0,0.2);
}

.btn-download i {
    margin-right: 5px;
}

/* Modales */
.modal-header {
    background-color: #007bff;
    color: white;
}

.modal-header .btn-close {
    color: white;
}

/* Botones dentro de los modales */
.modal .btn {
    margin-top: 10px;
}

/* Contenido del dashboard */
.dashboard-container {
    display: flex;
    flex-direction: column;
}

.sidebar {
    width: 250px;
    background-color: #2a2d34;
    color: #fff;
    position: fixed;
    height: 100%;
    top: 0;
    left: 0;
    display: flex;
    flex-direction: column;
    transition: left 0.3s ease;
    overflow: auto;
}

.sidebar.active {
    left: 0;
}

.nav-links li {
    position: relative;
}


.nav-links {
    list-style: none;
    padding: 0;
    margin: 0;
}

.nav-links a {
    display: flex;
    align-items: center;
    padding: 13.5px;
    color: #fff;
    text-decoration: none;
    position: relative;
}

/* Animación de movimiento para cada opción del menú al pasar el mouse */
.nav-links a:hover {
    background-color: #3e4149;
    transform: translateY(-5px); /* Mueve la opción hacia arriba */
}

/* Animación de retorno a la posición original */
.nav-links a {
    transition: transform 0.3s ease;
}

.nav-links a:hover {
    background-color: #3e4149; /* Cambia el color de fondo al pasar el mouse */
}

.header {
    background: -webkit-linear-gradient(38deg, #39bb25, #f4f816); /* Chrome 10-25, Safari 5.1-6 */
    background: linear-gradient(38deg, #39bb25, #f4f816); /* W3C, IE 10+/ Edge, Firefox 16+, Chrome 26+, Opera 12+, Safari 7+ */
    color: #030303;
    padding: 12px;
    position: fixed;
    top: 0;
    left: 250px;
    width: calc(100% - 250px);
    display: flex;
    align-items: center;
    justify-content: space-between; /* Centra el contenido */
    z-index: 1000;
}

.header-logo img {
    height: 80px;
    margin-right: 15px;
}

.header h1 {
    font-weight: 800;
    font-size: 1.8em;
    text-align: center; /* Asegura que el texto esté centrado dentro de su contenedor */
    margin: 0 auto; /* Centra el título dentro de su contenedor */
}

.content {
    margin-left: 250px;
    margin-top: 60px;
    padding: 20px;
}
/* Estilos adicionales para el submenú */
.submenu {
    list-style: none;
    padding: 0;
    margin: 0;
    display: none;
    background-color: #2a2d34;
}
.submenu li {
    padding: 0;
}
.submenu a {
    padding: 10px 15px;
    color: #fff;
    text-decoration: none;
    display: block;
}
.submenu a:hover {
    background-color: #3e4149;
}
.submenu.show {
    display: block;
}
.dropdown-arrow {
    float: right;
    margin-left: auto;
}
.nav-category {
    margin-bottom: 10px; /* Espacio entre categorías */
    margin-top: 10px;
}

.nav-category h3 {
    font-size: 1em; /* Tamaño del texto del título */
    color: #05f505; /* Color del título */
    margin-bottom: 7px; /* Espacio debajo del título */
}
/* Fondo transparente que cubre toda la página */
/* Fondo transparente que cubre toda la página */
.loading-overlay {
    position: fixed;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    background-color: rgba(0, 0, 0, 0.5); /* Fondo semi-transparente */
    display: flex;
    justify-content: center;
    align-items: center;
    z-index: 1000; /* Asegura que esté por encima de otros elementos */
}

/* Contenido del cargando */
.loading-content {
    text-align: center;
    color: white;
    font-size: 24px;
}

/* Ícono de carga */
.loading-content i {
    font-size: 50px;
    margin-bottom: 10px;
}

    </style>
</head>
<body>
    <div class="dashboard-container">

        <!-- Menú lateral -->
        <nav class="sidebar">
            <div class="nav-category">
                <h3><i class="fas fa-cogs"></i> Administración</h3>
                <ul class="nav-links">
                    <li><a href="/dashboard"><i class="fas fa-tachometer-alt"></i> Dashboard</a></li>
                    <li><a href="/usuarios"><i class="fas fa-users"></i> Usuarios</a></li>
                    <li><a href="/profesores"><i class="fas fa-chalkboard-teacher"></i> Profesores</a></li>
                    <li><a href="/alumnos"><i class="fas fa-user-graduate"></i> Alumnos</a></li>
                    <li><a href="/grados"><i class="fas fa-graduation-cap"></i> Grados</a></li>
                </ul>
            </div>
            
            <div class="nav-category">
                <h3><i class="fas fa-book-open"></i> Gestión Académica</h3>
                <ul class="nav-links">
                    <li><a href="/cursos"><i class="fas fa-book"></i> Cursos</a></li>
                    <li><a href="/horarios"><i class="fas fa-clock"></i> Horarios</a></li>
                    <li><a href="/asistencia"><i class="fas fa-user-check"></i> Asistencia</a></li>
                    <li><a href="/periodo"><i class="fas fa-calendar-alt"></i> Periodo Escolar</a></li>
                </ul>
            </div>
            
            <div class="nav-category">
                <h3><i class="fas fa-money-check-alt"></i> Gestión Financiera</h3>
                <ul class="nav-links">
                    <li><a href="/pagos"><i class="fas fa-money-bill-alt"></i> Pagos</a></li>
                    <li><a href="/recibos"><i class="fas fa-file-invoice"></i> Crear Recibos</a></li>
                </ul>
            </div>
            
            <div class="nav-category">
                <h3><i class="fas fa-chart-line"></i> Reportes y Notificaciones</h3>
                <ul class="nav-links">
                    <li><a href="/reportes"><i class="fas fa-chart-bar"></i> Reportes</a></li>
                    <li><a href="/notificaciones"><i class="fas fa-bell"></i> Notificaciones</a></li>
                </ul>
            </div>        
        </nav>
    
        <!-- Cabecera -->
        <header class="header">
            <div class="header-logo">
                <img src="/img/home.jpg" alt="Logo">
            </div>
            <h1>CENTRO ESCOLAR CECEC</h1>
        </header>

    <div class="content">
    <div class="container mt-4">
        <h1>Usuarios</h1>
        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#createUserModal"><i class="fas fa-user-plus"></i> Agregar Usuario</button>
        <!-- Botones de descarga con estilos consistentes -->
        <button id="generateActiveExcel" class="btn btn-download btn-excel">
        <i class="fas fa-file-excel"></i> Excel Activo
        </button>
        <button id="generateInactiveExcel" class="btn btn-download btn-excel">
        <i class="fas fa-file-excel"></i> Excel Inactivo
        </button>
        <button id="generateActivePdf" class="btn btn-download btn-pdf">
        <i class="fas fa-file-pdf"></i> PDF Activo
        </button>
        <button id="generateInactivePdf" class="btn btn-download btn-pdf">
        <i class="fas fa-file-pdf"></i> PDF Inactivo
</button>

        <!-- Opciones de cantidad de registros por página -->
        <div class="records-per-page-container">
            <label for="recordsPerPage" class="form-label">Registros por Página:</label>
            <select id="recordsPerPage" class="form-control records-per-page-select">
                <option value="10">10</option>
                <option value="25">25</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </select>
        </div>

        <div class="filter-container">
            <input type="text" id="nameFilter" class="form-control filter-input" placeholder="Nombre">
            <input type="text" id="emailFilter" class="form-control filter-input" placeholder="Correo">
            <select id="roleFilter" class="form-control filter-input">
                <option value="">Rol</option>
                <option value="Administrador">Administrador</option>
                <option value="Profesor">Profesor</option>
            </select>
            <select id="statusFilter" class="form-control filter-input">
                <option value="">Estado</option>
                <option value="activo">Activo</option>
                <option value="inactivo">Inactivo</option>
            </select>
            <button id="filterButton" class="btn btn-filter filter-button">Filtrar</button>
        </div>

    

        <!-- Tabla de usuarios -->
        <table class="table mt-3">
            <thead>
                <tr>
                    <th>ID</th>
                    <th>Nombre</th>
                    <th>Correo</th>
                    <th>Teléfono</th>
                    <th>Dirección</th>
                    <th>Fecha de Nacimiento</th>
                    <th>Género</th>
                    <th>Rol</th>
                    <th>Estado</th>
                    <th>Acciones</th>
                </tr>
            </thead>
            <tbody id="userTableBody">
                <!-- Los usuarios se cargarán aquí mediante JavaScript -->

                <!-- Contenedor de carga -->
<div id="loading" style="display: none;" class="loading-overlay">
    <div class="loading-content">
        <i class="fas fa-spinner fa-spin"></i>
        <p>Cargando...</p>
    </div>
</div>
            </tbody>
        </table>

        <!-- Paginación -->
        <nav aria-label="Page navigation">
            <ul class="pagination justify-content-end" id="pagination">
                <!-- Los botones de paginación se cargarán aquí -->
            </ul>
        </nav>

        <!-- Modal para crear usuario -->
        <div class="modal fade" id="createUserModal" tabindex="-1" aria-labelledby="createUserModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="createUserModalLabel">Crear Usuario</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <form id="createUserForm">
                            <div class="mb-3">
                                <label for="nombre" class="form-label">Nombre</label>
                                <input type="text" class="form-control" id="nombre" required>
                            </div>
                            <div class="mb-3">
                                <label for="correo" class="form-label">Correo</label>
                                <input type="email" class="form-control" id="correo" required>
                            </div>
                            <div class="mb-3">
                                <label for="password" class="form-label">Contraseña</label>
                                <input type="password" class="form-control" id="password" required>
                            </div>
                            <div class="mb-3">
                                <label for="telefono" class="form-label">Teléfono</label>
                                <input type="text" class="form-control" id="telefono">
                            </div>
                            <div class="mb-3">
                                <label for="direccion" class="form-label">Dirección</label>
                                <input type="text" class="form-control" id="direccion">
                            </div>
                            <div class="mb-3">
                                <label for="fecha_nacimiento" class="form-label">Fecha de Nacimiento</label>
                                <input type="date" id="fecha_nacimiento" class="form-control">
                            </div>
                            <div class="mb-3">
                                <label for="genero" class="form-label">Género</label>
                                <select class="form-select" id="genero">
                                    <option value="M">Masculino</option>
                                    <option value="F">Femenino</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="estado" class="form-label">Estado</label>
                                <select class="form-select" id="estado">
                                    <option value="activo">Activo</option>
                                    <option value="inactivo">Inactivo</option>
                                </select>
                            </div>
                            <div class="mb-3">
                                <label for="rol" class="form-label">Rol</label>
                                <select class="form-select" id="rol">
                                    <option value="1">Administrador</option>
                                    <option value="2">Profesor</option>
                                </select>
                            </div>
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                            <button type="button" class="btn btn-primary" id="saveUserButton">Guardar</button>
                        </form>
                    </div>
                </div>
            </div>
        </div>

       <!-- Modal para editar usuario -->
<div class="modal fade" id="editUserModal" tabindex="-1" aria-labelledby="editUserModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title" id="editUserModalLabel">Editar Usuario</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
            </div>
            <div class="modal-body">
                <form id="editUserForm">
                    <input type="hidden" id="editUserId">
                    <div class="mb-3">
                        <label for="editNombre" class="form-label">Nombre</label>
                        <input type="text" class="form-control" id="editNombre">
                    </div>
                    <div class="mb-3">
                        <label for="editCorreo" class="form-label">Correo</label>
                        <input type="email" class="form-control" id="editCorreo">
                    </div>
                    <div class="mb-3">
                        <label for="editPassword" class="form-label">Contraseña</label>
                        <input type="password" class="form-control" id="editPassword">
                    </div>
                    <div class="mb-3">
                        <label for="editTelefono" class="form-label">Teléfono</label>
                        <input type="text" class="form-control" id="editTelefono">
                    </div>
                    <div class="mb-3">
                        <label for="editDireccion" class="form-label">Dirección</label>
                        <input type="text" class="form-control" id="editDireccion">
                    </div>
                    <div class="mb-3">
                        <label for="editFechaNacimiento" class="form-label">Fecha de Nacimiento</label>
                        <input type="date" id="editFechaNacimiento" class="form-control">
                    </div>
                    <div class="mb-3">
                        <label for="editGenero" class="form-label">Género</label>
                        <select class="form-select" id="editGenero">
                            <option value="M">Masculino</option>
                            <option value="F">Femenino</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editEstado" class="form-label">Estado</label>
                        <select class="form-select" id="editEstado">
                            <option value="activo">Activo</option>
                            <option value="inactivo">Inactivo</option>
                        </select>
                    </div>
                    <div class="mb-3">
                        <label for="editRol" class="form-label">Rol</label>
                        <select class="form-select" id="editRol">
                            <option value="1">Administrador</option>
                            <option value="2">Profesor</option>
                        </select>
                    </div>
                    <button type="button" class="btn btn-primary" id="updateUserButton">Actualizar</button>
                    <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                </form>
            </div>
        </div>
    </div>
</div>

        <!-- Modal para ver usuario -->
        <div class="modal fade" id="viewUserModal" tabindex="-1" aria-labelledby="viewUserModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="viewUserModalLabel">Detalles del Usuario</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <p><strong>Nombre:</strong> <span id="viewNombre"></span></p>
                        <p><strong>Correo:</strong> <span id="viewCorreo"></span></p>
                        <p><strong>Teléfono:</strong> <span id="viewTelefono"></span></p>
                        <p><strong>Dirección:</strong> <span id="viewDireccion"></span></p>
                        <p><strong>Fecha de Nacimiento:</strong> <span id="viewFechaNacimiento"></span></p>
                        <p><strong>Género:</strong> <span id="viewGenero"></span></p>
                        <p><strong>Estado:</strong> <span id="viewEstado"></span></p>
                        <p><strong>Rol:</strong> <span id="viewRol"></span></p>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cerrar</button>
                    </div>
                </div>
            </div>
        </div>

        <!-- Modal para eliminar usuario -->
        <div class="modal fade" id="deleteUserModal" tabindex="-1" aria-labelledby="deleteUserModalLabel" aria-hidden="true">
            <div class="modal-dialog">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="deleteUserModalLabel">Eliminar Usuario</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Cerrar"></button>
                    </div>
                    <div class="modal-body">
                        <p>¿Está seguro de que desea eliminar este usuario?</p>
                        <button type="button" class="btn btn-danger" id="deleteUserButton">Eliminar</button>
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancelar</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Añade esto para mostrar mensajes -->
<div id="messageBox" class="alert" style="display:none;"></div>


    <!-- Scripts de Bootstrap y jsPDF -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://code.jquery.com/jquery-3.5.1.slim.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.11.6/dist/umd/popper.min.js"></script>

    <script>
            function showMessage(type, message) {
                const messageBox = document.getElementById('messageBox');
                messageBox.className = `alert alert-${type}`;
                messageBox.innerText = message;
                messageBox.style.display = 'block'; // Muestra el mensaje
                setTimeout(() => messageBox.style.display = 'none', 3000); // Oculta el mensaje después de 3 segundos
            }
            
            function formatISOToDate(isoDate) {
                const date = new Date(isoDate);
                const day = String(date.getDate()).padStart(2, '0');
                const monthNames = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
                const month = monthNames[date.getMonth()];
                const year = date.getFullYear();
                return `${day} ${month} ${year}`;
            }
            
            
            document.addEventListener('DOMContentLoaded', () => {
                let currentPage = 1;
                let recordsPerPage = 5;
            
                function loadUsers(page, records) {
                    fetch(`/api/usuarios?page=${page}&records=${records}`)
                        .then(response => response.json())
                        .then(data => {
                            const tableBody = document.getElementById('userTableBody');
                            tableBody.innerHTML = '';
            
                            data.users.forEach(user => {
                                const row = document.createElement('tr');
                                row.innerHTML = `
                                    <td>${user.id_usuario}</td>
                                    <td>${user.nombre_usuario}</td>
                                    <td>${user.email}</td>
                                    <td>${user.telefono}</td>
                                    <td>${user.direccion}</td>
                                    <td>${formatISOToDate(user.fecha_nacimiento)}</td>
                                    <td>${user.genero}</td>
                                    <td>${user.id_rol}</td>
                                    <td>${user.estado}</td>
                                    <td>
                                        <div class="btn-group" role="group" aria-label="Acciones">
                                            <button class="btn btn-info btn-sm" data-id="${user.id_usuario}" onclick="viewUser(this)"><i class="fas fa-eye"></i></button>
                                            <button class="btn btn-warning btn-sm" data-id="${user.id_usuario}" onclick="editUser(this)"><i class="fas fa-edit"></i></button>
                                            <button class="btn btn-danger btn-sm" data-id="${user.id_usuario}" onclick="deleteUser(this)"><i class="fas fa-trash"></i></button>
                                        </div>
                                    </td>
                                `;
                                tableBody.appendChild(row);
                            });
            
                            const pagination = document.getElementById('pagination');
                            pagination.innerHTML = '';
            
                            const createPageItem = (text, page, isDisabled = false, isActive = false) => {
                                const li = document.createElement('li');
                                li.className = `page-item${isDisabled ? ' disabled' : ''}${isActive ? ' active' : ''}`;
                                li.innerHTML = `
                                    <a class="page-link" href="#" data-page="${page}">${text}</a>
                                `;
                                return li;
                            };
            
                            // Botón de "Anterior"
                            pagination.appendChild(createPageItem('Anterior', currentPage - 1, currentPage === 1));
            
                            // Botones de páginas
                            for (let i = 1; i <= data.totalPages; i++) {
                                pagination.appendChild(createPageItem(i, i, false, i === currentPage));
                            }
            
                            // Botón de "Siguiente"
                            pagination.appendChild(createPageItem('Siguiente', currentPage + 1, currentPage === data.totalPages));
                        })
                        .catch(error => showMessage('danger', `Error al cargar usuarios: ${error.message}`));
                }
    
                document.getElementById('pagination').addEventListener('click', (e) => {
                    if (e.target.classList.contains('page-link')) {
                        e.preventDefault();
                        const page = parseInt(e.target.getAttribute('data-page'));
                        if (!isNaN(page) && page !== currentPage) {
                            currentPage = page;
                            loadUsers(page);
                        }
                    }
                });
    
                loadUsers(currentPage);
                
                window.viewUser = function(button) {
                    const id = button.getAttribute('data-id');
        
                    fetch(`/api/usuarios/${id}`)
                        .then(response => response.json())
                        .then(user => {
                            document.getElementById('viewNombre').innerText = user.nombre_usuario;
                            document.getElementById('viewCorreo').innerText = user.email;
                            document.getElementById('viewTelefono').innerText = user.telefono;
                            document.getElementById('viewDireccion').innerText = user.direccion;
                            document.getElementById('viewFechaNacimiento').innerText = formatISOToDate(user.fecha_nacimiento);
                            document.getElementById('viewGenero').innerText = user.genero;
                            document.getElementById('viewEstado').innerText = user.estado;
                            document.getElementById('viewRol').innerText = user.id_rol;
        
                            const viewUserModal = new bootstrap.Modal(document.getElementById('viewUserModal'));
                            viewUserModal.show();
                        })
                        .catch(error => showMessage('danger', `Error al ver usuario: ${error.message}`));
                }
        
                window.editUser = function(button) {
                    const id = button.getAttribute('data-id');
        
                    fetch(`/api/usuarios/${id}`)
                        .then(response => response.json())
                        .then(user => {
                            document.getElementById('editUserId').value = user.id_usuario;
                            document.getElementById('editNombre').value = user.nombre_usuario;
                            document.getElementById('editCorreo').value = user.email;
                            document.getElementById('editPassword').value = ''; // Clear password field
                            document.getElementById('editTelefono').value = user.telefono;
                            document.getElementById('editDireccion').value = user.direccion;
                            document.getElementById('editFechaNacimiento').value = formatISOToDate(user.fecha_nacimiento); // Formatea la fecha
                            document.getElementById('editGenero').value = user.genero;
                            document.getElementById('editEstado').value = user.estado;
                            document.getElementById('editRol').value = user.id_rol;
        
                            const editUserModal = new bootstrap.Modal(document.getElementById('editUserModal'));
                            editUserModal.show();
                        })
                        .catch(error => showMessage('danger', `Error al editar usuario: ${error.message}`));
                }
        
                document.getElementById('saveUserButton').addEventListener('click', () => {
                    const fechaNacimiento = document.getElementById('fecha_nacimiento').value;
                    const user = {
                        nombre_usuario: document.getElementById('nombre').value,
                        email: document.getElementById('correo').value,
                        contraseña: document.getElementById('password').value,
                        telefono: document.getElementById('telefono').value,
                        direccion: document.getElementById('direccion').value,
                        fecha_nacimiento: fechaNacimiento,
                        genero: document.getElementById('genero').value,
                        estado: document.getElementById('estado').value,
                        id_rol: document.getElementById('rol').value
                    };
                
                    fetch('/api/usuarios', {
                        method: 'POST',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(user)
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('User created:', data); // Debugging line
                        const createUserModal = document.getElementById('createUserModal');
                        const modalInstance = bootstrap.Modal.getInstance(createUserModal); 
                        modalInstance.hide(); // Cierra el modal
                        loadUsers(currentPage); // Recarga los usuarios
                        showMessage('success', 'Usuario creado exitosamente.'); // Asegúrate de que esto se llame
                    })
                    .catch(error => showMessage('danger', `Error al crear usuario: ${error.message}`));
                });
                
        
                document.getElementById('updateUserButton').addEventListener('click', () => {
                    const id = document.getElementById('editUserId').value;
                    const user = {
                        nombre_usuario: document.getElementById('editNombre').value,
                        email: document.getElementById('editCorreo').value,
                        contraseña: document.getElementById('editPassword').value,
                        telefono: document.getElementById('editTelefono').value,
                        direccion: document.getElementById('editDireccion').value,
                        fecha_nacimiento: document.getElementById('editFechaNacimiento').value,
                        genero: document.getElementById('editGenero').value,
                        estado: document.getElementById('editEstado').value,
                        id_rol: document.getElementById('editRol').value
                    };
        
                    fetch(`/api/usuarios/${id}`, {
                        method: 'PUT',
                        headers: { 'Content-Type': 'application/json' },
                        body: JSON.stringify(user)
                    })
                    .then(response => response.json())
                    .then(() => {
                        const editUserModal = document.getElementById('editUserModal');
                        const modalInstance = bootstrap.Modal.getInstance(editUserModal);
                        modalInstance.hide(); // Cierra el modal
                        loadUsers(currentPage); // Recarga los usuarios
                        showMessage('success', 'Usuario actualizado exitosamente.');
                    })
                    .catch(error => showMessage('danger', `Error al actualizar usuario: ${error.message}`));
                });
        
                window.deleteUser = function(button) {
                    const id = button.getAttribute('data-id');
                    document.getElementById('deleteUserButton').setAttribute('data-id', id);
        
                    const deleteUserModal = new bootstrap.Modal(document.getElementById('deleteUserModal'));
                    deleteUserModal.show();
                }
        
                document.getElementById('deleteUserButton').addEventListener('click', () => {
                    const id = document.getElementById('deleteUserButton').getAttribute('data-id');
        
                    fetch(`/api/usuarios/${id}`, {
                        method: 'DELETE'
                    })
                    .then(response => response.json())
                    .then(() => {
                        const deleteUserModal = document.getElementById('deleteUserModal');
                        const modalInstance = bootstrap.Modal.getInstance(deleteUserModal);
                        modalInstance.hide(); // Cierra el modal
                        loadUsers(currentPage); // Recarga los usuarios
                        showMessage('success', 'Usuario eliminado exitosamente.');
                    })
                    .catch(error => showMessage('danger', `Error al eliminar usuario: ${error.message}`));
                });
        
                document.getElementById('pagination').addEventListener('click', (e) => {
                    if (e.target.classList.contains('page-link')) {
                        e.preventDefault();
                        const page = parseInt(e.target.getAttribute('data-page'));
                        currentPage = page;
                        loadUsers(page);
                    }
                });
        
                loadUsers(currentPage);
            });

            //reportes
         // Función para generar archivo Excel
function generateExcel(users, status) {
    const filteredUsers = users.filter(user => user.estado === status);

    if (filteredUsers.length === 0) {
        alert(`No se encontraron usuarios ${status}.`);
        return;
    }

    // Crear los datos en formato de hoja de cálculo
    const data = [];
    const headers = ['ID', 'Nombre', 'Correo', 'Teléfono', 'Dirección', 'Fecha de Nacimiento', 'Género', 'Rol', 'Estado'];
    data.push(headers);

    filteredUsers.forEach(user => {
        const row = [
            user.id_usuario,
            user.nombre_usuario,
            user.email,
            user.telefono,
            user.direccion,
            user.fecha_nacimiento.split('T')[0],
            user.genero,
            user.id_rol === 1 ? 'Administrador' : 'Profesor',
            user.estado
        ];
        data.push(row);
    });

    // Crear una nueva hoja de trabajo (worksheet)
    const ws = XLSX.utils.aoa_to_sheet(data);
    
    // Crear un nuevo libro de trabajo (workbook)
    const wb = XLSX.utils.book_new();
    XLSX.utils.book_append_sheet(wb, ws, `Usuarios ${status}`);
    
    // Descargar el archivo Excel
    XLSX.writeFile(wb, `reporte_usuarios_${status}.xlsx`);
}

// Función para generar archivo PDF estilizado
function generateStyledPdf(users, status) {
    const { jsPDF } = window.jspdf;
    const pdf = new jsPDF('landscape');

    const filteredUsers = users.filter(user => user.estado === status);

    if (filteredUsers.length === 0) {
        alert(`No se encontraron usuarios ${status}.`);
        return;
    }

    // Agregar logo
    const logo = new Image();
    logo.src = 'img/home.jpg'; // Cambia esta línea a la ruta de tu logo
    logo.onload = function() {
        pdf.addImage(logo, 'PNG', 10, 10, 30, 30); // Ajustar tamaño y posición del logo

        // Estilos para el título
        pdf.setFont('helvetica', 'bold');
        pdf.setFontSize(24);
        pdf.setTextColor(0, 0, 0); // Cambiar a color negro
        pdf.text(`Reporte de Usuarios ${status.toUpperCase()}`, 148, 20, null, null, 'center');

        // Quitar línea decorativa
        // pdf.setDrawColor(0, 102, 204);
        // pdf.setLineWidth(1.5);
        // pdf.line(20, 25, 270, 25); // Línea horizontal decorativa debajo del título

        // Configuración de la tabla
        pdf.autoTable({
            head: [['ID', 'Nombre', 'Correo', 'Teléfono', 'Dirección', 'Fecha de Nacimiento', 'Género', 'Rol', 'Estado']],
            body: filteredUsers.map(user => [
                user.id_usuario,
                user.nombre_usuario,
                user.email,
                user.telefono,
                user.direccion,
                user.fecha_nacimiento.split('T')[0],
                user.genero,
                user.id_rol === 1 ? 'Administrador' : 'Profesor',
                user.estado
            ]),
            startY: 40, // Ajustar la posición inicial de la tabla
            theme: 'striped',
            styles: { fontSize: 12 },
            headStyles: { fillColor: [144, 238, 144] },
            margin: { top: 10 }
        });

        // Añadir pie de página
        pdf.setFontSize(10);
        pdf.setTextColor(100, 100, 100);
        pdf.text(`Generado el ${new Date().toLocaleString('es-GT')}`, 148, pdf.autoTable.previous.finalY + 10, null, null, 'center');

        // Descargar el archivo PDF
        pdf.save(`reporte_usuarios_${status}.pdf`);
    };
}

// Función para obtener usuarios y generar el archivo correspondiente
function fetchUsersAndGenerateReport(status, type) {
    fetch('/api/usuarios')
        .then(response => response.json())
        .then(data => {
            const users = data.users;
            if (type === 'excel') {
                generateExcel(users, status);
            } else if (type === 'pdf') {
                generateStyledPdf(users, status);
            }
        })
        .catch(error => console.error('Error al obtener datos de la API:', error));
}

// Eventos de clic para generar los reportes
document.getElementById('generateActiveExcel').addEventListener('click', () => {
    fetchUsersAndGenerateReport('activo', 'excel');
});

document.getElementById('generateInactiveExcel').addEventListener('click', () => {
    fetchUsersAndGenerateReport('inactivo', 'excel');
});

document.getElementById('generateActivePdf').addEventListener('click', () => {
    fetchUsersAndGenerateReport('activo', 'pdf');
});

document.getElementById('generateInactivePdf').addEventListener('click', () => {
    fetchUsersAndGenerateReport('inactivo', 'pdf');
});



//filtro
document.addEventListener('DOMContentLoaded', function() {
    let users = []; // Variable global para almacenar usuarios

    // Obtener los usuarios desde la API
    function fetchUsers() {
        return fetch('/api/usuarios')
            .then(response => response.json())
            .then(data => {
                users = data.users; // Actualiza la lista global de usuarios
                return users;
            })
            .catch(error => console.error('Error al obtener datos de la API:', error));
    }

    function renderTable(usersToRender) {
        const tbody = document.getElementById('userTableBody');
        tbody.innerHTML = ''; // Limpia la tabla antes de renderizar

        usersToRender.forEach(user => {
            const row = `<tr>
                <td>${user.id_usuario}</td>
                <td>${user.nombre_usuario}</td>
                <td>${user.email}</td>
                <td>${user.telefono}</td>
                <td>${user.direccion}</td>
                <td>${user.fecha_nacimiento.split('T')[0]}</td>
                <td>${user.genero}</td>
                <td>${user.id_rol === 1 ? 'Administrador' : 'Profesor'}</td>
                <td>${user.estado}</td>
                <td>
                    <div class="btn-group" role="group" aria-label="Acciones">
                        <button class="btn btn-info btn-sm" data-id="${user.id_usuario}" onclick="viewUser(this)"><i class="fas fa-eye"></i></button>
                        <button class="btn btn-warning btn-sm" data-id="${user.id_usuario}" onclick="editUser(this)"><i class="fas fa-edit"></i></button>
                        <button class="btn btn-danger btn-sm" data-id="${user.id_usuario}" onclick="deleteUser(this)"><i class="fas fa-trash"></i></button>
                    </div>
                </td>
            </tr>`;
            tbody.insertAdjacentHTML('beforeend', row);
        });
    }

    function applyFilter() {
        const nameFilter = document.getElementById('nameFilter').value.toLowerCase();
        const emailFilter = document.getElementById('emailFilter').value.toLowerCase();
        const roleFilter = document.getElementById('roleFilter').value;
        const statusFilter = document.getElementById('statusFilter').value;

        const filteredUsers = users.filter(user => {
            const matchesName = user.nombre_usuario.toLowerCase().includes(nameFilter);
            const matchesEmail = user.email.toLowerCase().includes(emailFilter);
            const matchesRole = roleFilter ? (user.id_rol === 1 ? 'Administrador' : 'Profesor') === roleFilter : true;
            const matchesStatus = statusFilter ? user.estado === statusFilter : true;
            return matchesName && matchesEmail && matchesRole && matchesStatus;
        });

        renderTable(filteredUsers);
    }

    document.getElementById('filterButton').addEventListener('click', applyFilter);

    // Filtro en tiempo real
    document.getElementById('nameFilter').addEventListener('input', applyFilter);
    document.getElementById('emailFilter').addEventListener('input', applyFilter);
    document.getElementById('roleFilter').addEventListener('change', applyFilter);
    document.getElementById('statusFilter').addEventListener('change', applyFilter);

    // Inicializar tabla y usuarios
    (async function initializeTable() {
        await fetchUsers(); // Carga la lista inicial de usuarios
        renderTable(users); // Renderiza la tabla con los usuarios iniciales
    })();
});


// Script para mostrar/ocultar el submenú de grados
document.querySelectorAll('.nav-links li > a').forEach(menuItem => {
    menuItem.addEventListener('click', function(event) {
        const submenu = this.nextElementSibling;
        if (submenu && submenu.classList.contains('submenu')) {
            event.preventDefault();
            submenu.classList.toggle('show');
        }
    });
});
//cargando
document.addEventListener("DOMContentLoaded", function () {
    const loading = document.getElementById('loading');

    // Selecciona los enlaces del menú lateral
    const moduleLinks = document.querySelectorAll('.nav-links a');

    moduleLinks.forEach(link => {
        link.addEventListener('click', function (e) {
            // Mostrar el mensaje de "Cargando"
            loading.style.display = 'flex';

            // Simular un retardo o puedes ocultarlo cuando la nueva página cargue
            setTimeout(() => {
                loading.style.display = 'none';
            }, 3000); // Puedes ajustar el tiempo según lo que necesites
        });
    });
});

    </script>
</body>
</html>