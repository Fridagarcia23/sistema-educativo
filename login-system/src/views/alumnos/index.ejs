<!DOCTYPE html>
<html lang="es">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Gestión de Estudiantes</title>
  <link href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css" rel="stylesheet">
  <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
  <script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
  
  <style>
    /* Estilos de los mensajes emergentes */
#messageBox {
  position: fixed;
  top: 20px;
  right: 20px;
  z-index: 1050;
  width: 300px;
}
    .pagination {
      display: flex;
      list-style: none;
    }
    
    .pagination li {
      margin: 0 5px;
    }
    
    .pagination button {
      padding: 8px 12px;
      border: 1px solid #ddd;
      background-color: white;
      cursor: pointer;
      border-radius: 5px;
    }
    
    .pagination button:hover {
      background-color: #f0f0f0;
    }
    
    .pagination button.active {
      background-color: #007bff;
      color: white;
      border-color: #007bff;
    }
    
    .pagination button.disabled {
      cursor: not-allowed;
      opacity: 0.5;
    }
    
  </style>
</head>
<body>
  <div class="container mt-4">
    <h1>Gestión de Estudiantes</h1>
    <button class="btn btn-primary mb-3" data-toggle="modal" data-target="#modalAgregarEstudiante">Agregar Estudiante</button>

    <!-- Tabla para listar estudiantes -->
    <table class="table table-bordered">
      <thead>
        <tr>
          <th>ID</th>
          <th>Nombre</th>
          <th>Email</th>
          <th>Fecha de Nacimiento</th>
          <th>Dirección</th>
          <th>Teléfono</th>
          <th>Grado</th>
          <th>Sección</th>
          <th>Año Escolar</th>
          <th>Acciones</th>
        </tr>
      </thead>
      <tbody id="tablaEstudiantes">
        <!-- Las filas se llenarán dinámicamente aquí -->
      </tbody>
    </table>
    <!-- Paginación -->
    <nav aria-label="Page navigation">
      <ul class="pagination justify-content-end" id="pagination">
          <!-- Los botones de paginación se cargarán aquí -->
      </ul>
  </nav>

  </div>

 <!-- Modal de Agregar Estudiante -->
<div class="modal fade" id="modalAgregarEstudiante" tabindex="-1" role="dialog" aria-labelledby="modalAgregarEstudianteLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalAgregarEstudianteLabel">Agregar Estudiante</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="formAgregarEstudiante">
          <!-- Datos del Alumno -->
          <div class="form-group">
            <label for="nombre">Nombre</label>
            <input type="text" class="form-control" id="nombre" name="nombre" required>
          </div>
          <div class="form-group">
            <label for="email">Email</label>
            <input type="email" class="form-control" id="email" name="email" required>
          </div>
          <div class="form-group">
            <label for="fecha_nacimiento">Fecha de Nacimiento</label>
            <input type="date" class="form-control" id="fecha_nacimiento" name="fecha_nacimiento" required>
          </div>
          <div class="form-group">
            <label for="direccion">Dirección</label>
            <textarea class="form-control" id="direccion" name="direccion" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="telefono">Teléfono</label>
            <input type="text" class="form-control" id="telefono" name="telefono" required>
          </div>
          <div class="form-group">
            <label for="grado">Grado</label>
            <select class="form-control" id="grado" name="grado" required>
              <option value="">Seleccione un grado</option>
              <!-- Opciones se llenarán dinámicamente -->
            </select>
          </div>
          <div class="form-group">
            <label for="seccion_modal">Sección</label>
            <select class="form-control" id="seccion_modal" name="seccion_modal" required>
              <option value="">Seleccione una sección</option>
              <!-- Opciones se llenarán dinámicamente -->
            </select>
          </div>
          <div class="form-group">
            <label for="anio_escolar">Año Escolar</label>
            <input type="number" class="form-control" id="anio_escolar" name="anio_escolar" required>
          </div>
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Cerrar</button>
          <button type="submit" class="btn btn-primary">Agregar Estudiante</button>
        </form>
      </div>
    </div>
  </div>
</div>


<!-- Modal de Editar Estudiante -->
<div class="modal fade" id="modalEditarEstudiante" tabindex="-1" role="dialog" aria-labelledby="modalEditarEstudianteLabel" aria-hidden="true">
  <div class="modal-dialog" role="document">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title" id="modalEditarEstudianteLabel">Editar Estudiante</h5>
        <button type="button" class="close" data-dismiss="modal" aria-label="Close">
          <span aria-hidden="true">&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <form id="formEditarEstudiante">
          <!-- Campo oculto para el ID del estudiante -->
          <input type="hidden" id="id_estudiante_edit" name="id_estudiante">

          <!-- Datos del Estudiante -->
          <div class="form-group">
            <label for="nombre_edit">Nombre</label>
            <input type="text" class="form-control" id="nombre_edit" name="nombre_edit" required>
          </div>
          <div class="form-group">
            <label for="email_edit">Email</label>
            <input type="email" class="form-control" id="email_edit" name="email_edit" required>
          </div>
          <div class="form-group">
            <label for="fecha_nacimiento_edit">Fecha de Nacimiento</label>
            <input type="date" class="form-control" id="fecha_nacimiento_edit" name="fecha_nacimiento_edit" required>
          </div>
          <div class="form-group">
            <label for="direccion_edit">Dirección</label>
            <textarea class="form-control" id="direccion_edit" name="direccion_edit" rows="3" required></textarea>
          </div>
          <div class="form-group">
            <label for="telefono_edit">Teléfono</label>
            <input type="text" class="form-control" id="telefono_edit" name="telefono_edit" required>
          </div>
          <div class="form-group">
            <label for="grado_edit">Grado</label>
            <select class="form-control" id="grado_edit" name="grado_edit" required>
              <option value="">Seleccione un grado</option>
              <!-- Opciones se llenarán dinámicamente -->
            </select>
          </div>
          <div class="form-group">
            <label for="seccion_edit_modal">Sección</label>
            <select class="form-control" id="seccion_edit_modal" name="seccion_edit_modal" required>
              <option value="">Seleccione una sección</option>
              <!-- Opciones se llenarán dinámicamente -->
            </select>
          </div>
          <div class="form-group">
            <label for="anio_escolar_edit">Año Escolar</label>
            <input type="number" class="form-control" id="anio_escolar_edit" name="anio_escolar_edit" required>
          </div>
          <button type="submit" class="btn btn-primary">Guardar Cambios</button>
        </form>
      </div>
    </div>
  </div>
</div>



<!-- Añade esto para mostrar mensajes -->
<div id="messageBox" class="alert" style="display:none;"></div>

<script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/@popperjs/core@2.9.2/dist/umd/popper.min.js"></script>
<script src="https://maxcdn.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

  <script>
    function showMessage(type, message) {
      const messageBox = document.getElementById('messageBox');
      messageBox.className = `alert alert-${type}`;
      messageBox.innerText = message;
      messageBox.style.display = 'block'; // Muestra el mensaje
      setTimeout(() => messageBox.style.display = 'none', 3000); // Oculta el mensaje después de 3 segundos
  }
    document.addEventListener('DOMContentLoaded', () => {
      const estudiantesPorPagina = 10;
  let estudiantes = [];
  let paginaActual = 1;

  async function cargarEstudiantes() {
    try {
      const response = await fetch('/api/estudiantes');
      if (!response.ok) throw new Error('Error en la respuesta de la API');
      
      estudiantes = await response.json();
      console.log('Estudiantes cargados:', estudiantes);
      
      mostrarPagina(paginaActual);
      crearBotonesDePaginacion();
    } catch (error) {
      console.error('Error al cargar estudiantes:', error);
    }
  }

  // Mostrar el modal con los datos del estudiante
  function abrirModalEditar(estudiante) {
    document.getElementById('id_estudiante_edit').value = estudiante.id;
    document.getElementById('nombre_edit').value = estudiante.nombre;
    document.getElementById('email_edit').value = estudiante.email;
    document.getElementById('fecha_nacimiento_edit').value = estudiante.fecha_nacimiento;
    document.getElementById('direccion_edit').value = estudiante.direccion;
    document.getElementById('telefono_edit').value = estudiante.telefono;
    document.getElementById('anio_escolar_edit').value = estudiante.anio_escolar;
  
    // Cargar grados y secciones
    cargarGrados().then(() => {
      document.getElementById('grado_edit').value = estudiante.grado_id; // Valor actual del grado
      cargarSecciones(estudiante.grado_id, estudiante.seccion_id); // Cargar secciones para el grado actual
      document.getElementById('seccion_edit_modal').value = estudiante.seccion_id; // Valor actual de la sección
    });
  
    $('#modalEditarEstudiante').modal('show');
  }

// Enviar los datos del formulario de edición al servidor
document.getElementById('formEditarEstudiante').addEventListener('submit', function(event) {
  event.preventDefault(); // Prevenir el envío del formulario por defecto

  const id_estudiante = document.getElementById('id_estudiante_edit').value;
  const nombre = document.getElementById('nombre_edit').value;
  const email = document.getElementById('email_edit').value;
  const fecha_nacimiento = document.getElementById('fecha_nacimiento_edit').value;
  const direccion = document.getElementById('direccion_edit').value;
  const telefono = document.getElementById('telefono_edit').value;
  const grado = document.getElementById('grado_edit').value;
  const seccion = document.getElementById('seccion_edit_modal').value;
  const anio_escolar = document.getElementById('anio_escolar_edit').value;

  const estudiante = {
    nombre,
    email,
    fecha_nacimiento,
    direccion,
    telefono,
    grado,
    seccion,
    anio_escolar
  };

  fetch(`/api/estudiantes/${id_estudiante}`, {
    method: 'PUT',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify(estudiante)
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      $('#modalEditarEstudiante').modal('hide');
      cargarEstudiantes(); // Recargar la lista de estudiantes
      alert('Estudiante actualizado correctamente.');
    } else {
      alert('Error al actualizar estudiante: ' + data.message);
    }
  })
  .catch(error => {
    console.error('Error:', error);
    alert('Error al actualizar estudiante: ' + error.message);
  });
});
  function mostrarPagina(pagina) {
    const inicio = (pagina - 1) * estudiantesPorPagina;
    const fin = inicio + estudiantesPorPagina;
    const estudiantesPagina = estudiantes.slice(inicio, fin);

    const tbody = document.getElementById('tablaEstudiantes');
    tbody.innerHTML = '';

    estudiantesPagina.forEach(estudiante => {
      const tr = document.createElement('tr');
      tr.innerHTML = `
        <td>${estudiante.id_estudiante}</td>
        <td>${estudiante.nombre}</td>
        <td>${estudiante.email}</td>
        <td>${formatearFecha(estudiante.fecha_nacimiento)}</td>
        <td>${estudiante.direccion}</td>
        <td>${estudiante.telefono}</td>
        <td>${estudiante.nombre_grado}</td>
        <td>${estudiante.nombre_seccion}</td>
        <td>${estudiante.anio_escolar}</td>
        <td>
          <button type="button" class="btn btn-warning btn-sm" data-toggle="modal" data-target="#modalEditarEstudiante">Editar</button>
          <button type="button" data-view-ficha data-id="${estudiante.id_estudiante}" class="btn btn-info btn-sm">Ver Ficha Completa</button>
          <button type="submit" class="btn btn-danger btn-sm">Eliminar</button>
        </td>
      `;
      tbody.appendChild(tr);
    });
  }

  function crearBotonesDePaginacion() {
    const totalPaginas = Math.ceil(estudiantes.length / estudiantesPorPagina);
    const paginacionDiv = document.getElementById('pagination');
    paginacionDiv.innerHTML = '';
  
    // Botón Anterior
    const anteriorBtn = document.createElement('button');
    anteriorBtn.textContent = 'Anterior';
    anteriorBtn.classList.add('page-link');
    if (paginaActual === 1) {
      anteriorBtn.classList.add('disabled');
      anteriorBtn.setAttribute('disabled', true);
    }
    anteriorBtn.addEventListener('click', () => {
      if (paginaActual > 1) {
        paginaActual--;
        mostrarPagina(paginaActual);
        crearBotonesDePaginacion();
      }
    });
    paginacionDiv.appendChild(anteriorBtn);
  
    // Botones numéricos
    for (let i = 1; i <= totalPaginas; i++) {
      const boton = document.createElement('button');
      boton.textContent = i;
      boton.classList.add('page-link');
      if (i === paginaActual) {
        boton.classList.add('active');
      }
      boton.addEventListener('click', () => {
        paginaActual = i;
        mostrarPagina(i);
        crearBotonesDePaginacion();
      });
      paginacionDiv.appendChild(boton);
    }
  
    // Botón Siguiente
    const siguienteBtn = document.createElement('button');
    siguienteBtn.textContent = 'Siguiente';
    siguienteBtn.classList.add('page-link');
    if (paginaActual === totalPaginas) {
      siguienteBtn.classList.add('disabled');
      siguienteBtn.setAttribute('disabled', true);
    }
    siguienteBtn.addEventListener('click', () => {
      if (paginaActual < totalPaginas) {
        paginaActual++;
        mostrarPagina(paginaActual);
        crearBotonesDePaginacion();
      }
    });
    paginacionDiv.appendChild(siguienteBtn);
  }
  async function cargarGrados() {
    try {
      const response = await fetch('/api/grados');
      if (!response.ok) throw new Error('Error al cargar grados');
      const grados = await response.json();
  
      const gradoSelects = [document.getElementById('grado'), document.getElementById('grado_edit')];
      gradoSelects.forEach(select => {
        select.innerHTML = '<option value="">Seleccione un grado</option>'; // Limpiar opciones
        grados.forEach(grado => {
          const option = document.createElement('option');
          option.value = grado.id_grado;
          option.textContent = grado.nombre_grado;
          select.appendChild(option);
        });
      });
    } catch (error) {
      console.error('Error al cargar grados:', error);
    }
  }
  
  async function cargarSecciones(gradoId, isEditForm = false) {
    try {
      const response = await fetch(`/api/secciones?grado=${gradoId}`);
      if (!response.ok) throw new Error('Error al cargar secciones');
  
      const secciones = await response.json();
      console.log('Secciones cargadas:', secciones);
  
      const seccionSelect = isEditForm ? document.getElementById('seccion_edit_modal') : document.getElementById('seccion_modal');
      seccionSelect.innerHTML = '<option value="">Seleccione una sección</option>'; // Limpiar opciones
      secciones.forEach(seccion => {
        const option = document.createElement('option');
        option.value = seccion.id_seccion;
        option.textContent = seccion.nombre_seccion;
        seccionSelect.appendChild(option);
      });
    } catch (error) {
      console.error('Error al cargar secciones:', error);
    }
  }
  async function actualizarEstudiante(id, datos) {
    try {
      const response = await fetch(`/api/estudiantes/${id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json'
        },
        body: JSON.stringify(datos)
      });
  
      const texto = await response.text(); // Captura la respuesta como texto
      console.log('Respuesta del servidor:', texto); // Imprime la respuesta para depuración
  
      try {
        const json = JSON.parse(texto); // Intenta parsear la respuesta como JSON
        if (json.success) {
          console.log('Estudiante actualizado correctamente:', json.message);
        } else {
          console.error('Error al actualizar estudiante:', json.message);
        }
      } catch (e) {
        console.error('Error al parsear JSON:', e);
      }
    } catch (error) {
      console.error('Error en la solicitud:', error);
    }
  }
  
  
  
  // Cargar grados y secciones al iniciar
  cargarGrados();
  cargarSecciones();

  document.getElementById('grado_edit').addEventListener('change', (event) => {
    const gradoId = event.target.value;
    if (gradoId) {
      cargarSecciones(gradoId, true); // Usamos `true` para indicar que es en el formulario de edición
    } else {
      document.getElementById('seccion_edit_modal').innerHTML = '<option value="">Seleccione una sección</option>';
    }
  });
    
      function formatearFecha(fechaISO) {
        const fecha = new Date(fechaISO);
        const dia = fecha.getDate().toString().padStart(2, '0');
        const mesesAbreviados = ["Ene", "Feb", "Mar", "Abr", "May", "Jun", "Jul", "Ago", "Sep", "Oct", "Nov", "Dic"];
        const mes = mesesAbreviados[fecha.getMonth()];
        const anio = fecha.getFullYear();
        return `${dia} ${mes} ${anio}`;
      }
      // Cargar datos iniciales
      cargarEstudiantes();
      cargarGrados();
    
      // Añadir el evento para cargar secciones al cambiar el grado
      // Añadir el evento para cargar secciones al cambiar el grado
document.getElementById('grado').addEventListener('change', (event) => {
  const gradoId = event.target.value;
  if (gradoId) {
    cargarSecciones(gradoId);
  } else {
    document.getElementById('seccion_modal').innerHTML = '<option value="">Seleccione una sección</option>';
  }
});

      // Event listener para el formulario de agregar estudiante
      document.getElementById('formAgregarEstudiante').addEventListener('submit', async (event) => {
        event.preventDefault(); // Previene el envío por defecto del formulario
      
        const formData = new FormData(event.target);
        const data = {};
        // Solo incluimos los datos que queremos enviar al servidor
        const camposRelevantes = ['nombre', 'email', 'fecha_nacimiento', 'direccion', 'telefono', 'grado', 'seccion_modal', 'anio_escolar'];
        formData.forEach((value, key) => {
          if (camposRelevantes.includes(key)) {
            data[key] = value;
          }
        });
        try {
          const response = await fetch('/estudiantes', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data),
          });
      
          if (!response.ok) {
            throw new Error('Error al guardar el estudiante');
          }
          const result = await response.json();
          console.log('Éxito:', result);
      
          // Mostrar mensaje de éxito
          showMessage('success', 'Estudiante agregado correctamente.');
      
          // Cierra el modal
          $('#modalAgregarEstudiante').modal('hide');
      
          // Actualiza la lista de estudiantes
          await cargarEstudiantes(); // Espera a que la lista se actualice
        } catch (error) {
          console.error('Error:', error);
          
          // Mostrar mensaje de error
          showMessage('danger', 'Hubo un error al agregar el estudiante.');
        }
      });
      
      // Manejo de botones para abrir el modal
  document.querySelectorAll('[data-open-modal]').forEach(button => {
    button.addEventListener('click', function() {
      const idEstudiante = this.getAttribute('data-id');
      abrirModalEditar(idEstudiante);
    });
  });
});
  </script>
</body>
</html>
